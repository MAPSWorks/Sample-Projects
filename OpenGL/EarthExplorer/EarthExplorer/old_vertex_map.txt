#version 330 core

layout(location = 0) in vec3 position;

out vec3 fragmentColor;

uniform mat4 MVP;
uniform vec2 partPos;

const float PI	= 3.14159;
const float SCALE = 20.0f;

float degtorad(float deg)
{
	return deg * PI / 180.;
}

void main()
{
	vec3  color;
	float longitude = partPos.x; 
	float latitude  = partPos.y; 
	float h			= position.z;

	//normalize vector of vertex positon (relative to whole part)
	float xInPart = position.x / 1200.;
	float yInPart = position.y / 1200.;

	//linear function:
	//for latitude = 0  distance(Y-axis) between two points(inside a fragment) doesn't change
	//for latitude = 90 distance(Y-axis) is multiplied by 2
	yInPart = yInPart * (latitude + 90.)/90.;

	//for(int i = 0; i <= latitude; i++) Y = Y + (i + 90.)/90.;
	//resolved function above (instead of loop) - calculation Y-position of a part:
	float Y = (latitude * latitude + 181 * latitude) / 180.;
	
	//calculation Y-position of vertex inside a part
	Y -= yInPart;

	//calculation X-position of vertex inside a part
	float X = longitude + xInPart;

    gl_Position = MVP * vec4(X, Y, 0, 1);	

	//choose a color depends on height
	if		(h < -500)  color = vec3(0.,       0.,		 0.);  //->black     
	else if (h < 10 )   color = vec3(0.,       0.,       1.);  //->blue
    else if (h < 500)   color = vec3(0.,       h/500,    0.);  //->green
    else if (h < 1000)  color = vec3(h/500-1,  1.,       0.);  //->yellow
    else if (h < 1500)  color = vec3(1.,       2.-h/500, 0.);  //->red
    else                color = vec3(1.,1.,1.);                //->white

	fragmentColor = color;
}

